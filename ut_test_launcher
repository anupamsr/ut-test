#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin"; # use the location of script

use Data::Dumper;
use Log::Log4perl qw(get_logger :levels);
use UTTest;

sub help()
{
    print "Usage: ut_test [INPUT_FILE]\n";
    print "Usage: ut_test -- test.tst file1 file2 ...\n";
    print "\n";
    print 'NOTE: We advise that you take a backup of your code before ' .
    "running this tool\n";
}

# Parse arguments
if (scalar @ARGV == 1)
{
    help();
    exit 0;
}

# Initialize logger
my $log_file = "$ARGV[0].log";
my $file_appender = Log::Log4perl::Appender->new(
    "Log::Log4perl::Appender::File",
    filename => $log_file,
    mode => 'append',
);
my $file_layout = Log::Log4perl::Layout::PatternLayout->new(
    "%d (%F:%L)> %p: %m%n");
$file_appender->layout($file_layout);

my $screen_appender = Log::Log4perl::Appender->new(
    "Log::Log4perl::Appender::ScreenColoredLevels",
);
my $screen_layout = Log::Log4perl::Layout::PatternLayout->new(
    "%p: %m%n");
$screen_appender->layout($screen_layout);
$screen_appender->threshold($INFO);

my $main_logger = get_logger('main');
$main_logger->level($INFO);
$main_logger->add_appender($file_appender);
$main_logger->add_appender($screen_appender);

my $make_logger = get_logger('make');
$make_logger->level($DEBUG);
$make_logger->add_appender($file_appender);
$make_logger->add_appender($screen_appender);

my $modifier_logger = get_logger('modifier');
$modifier_logger->level($DEBUG);
$modifier_logger->add_appender($file_appender);
$modifier_logger->add_appender($screen_appender);

my $ut_test_logger = get_logger('ut_test');
$ut_test_logger->level($DEBUG);
$ut_test_logger->add_appender($file_appender);
$ut_test_logger->add_appender($screen_appender);

my $launcher_logger = get_logger('launcher');
$launcher_logger->level($DEBUG);
$launcher_logger->add_appender($file_appender);
$launcher_logger->add_appender($screen_appender);

# Initialize the list of uts
my @uts;
my %files_by;

# Check if we are skipping input file in favor of command line arguments
if ($ARGV[1] eq '--')
{
    # Get UT
    my $ut = $ARGV[2];
    push @uts, $ut;

    # Get file list
    my @files = @ARGV[3..$#ARGV];
    $files_by{$ut} = \@files;
}
else
{
    # Set default values
    my $file = $ARGV[1];

    die "$file is not a file" unless -f $file;

    # Parse conf file
    %files_by = %{UTTest::parse_conf($file)};
}
$ut_test_logger->debug(Dumper \%files_by);

my $rc;
@uts = keys %files_by;
my $ut_sl_num = 0;
my $ut_total = scalar @uts;
foreach my $ut (@uts)
{
    ++$ut_sl_num;

    # First check if the UT is broken or not.
    $main_logger->info("($ut_sl_num/$ut_total) Testing $ut");
    $rc = UTTest::compile($ut);
    if ($rc != 0)
    {
        $main_logger->warn("Please fix $ut before running this tool");
        next;
    }
    $rc = UTTest::check($ut);
    if ($rc != 0)
    {
        $main_logger->warn("Please fix $ut before running this tool");
        next;
    }
    
    # Now we are sure that the UT is correct. Now we make our changes.
    my @modifiers = @{UTTest::get_modifiers()};

    foreach my $file (@{$files_by{$ut}})
    {
        # Read file contents into an array
        open FH, '<', $file or $main_logger->fatal("Error opening '$file' for " .
            'reading... skipping!');
        my @file_content = <FH>;
        close FH;

        foreach my $modifier (sort {uc($a) cmp uc($b)} @modifiers)
        {
            # Skip if cannot be used
            next unless $modifier->can('modify');

            my $rc = $modifier->modify($file, \@file_content);
            if ($rc == 0)
            {
                $main_logger->debug('Nothing to modify');
            }
            elsif ($rc > 0)
            {
                $rc = UTTest::recompile($ut);
                if ($rc == 0)
                {
                    $rc = UTTest::recheck($ut);
                    if ($rc == 0)
                    {
                        $main_logger->error("PROBLEM: $ut did't catch this type of bug");
                    }
                }

                # Restore original
                $main_logger->debug("Restoring original $file");
                open FH, '>', $file or $main_logger->fatal("Couldn't restore, " .
                    ' please do it manually.');
                print FH @file_content;
                close FH;
            }
        }
    }
}
